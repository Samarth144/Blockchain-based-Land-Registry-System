document.addEventListener('DOMContentLoaded', function() {
    // Initialize AI chat
    setupAIChat();
    
    // Form submission handlers
    document.getElementById('analyzeDocumentForm')?.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        // Show loading state
        const resultDiv = document.getElementById('documentAnalysisResult');
        const contentDiv = document.getElementById('analysisResultsContent');
        resultDiv.style.display = 'block';
        contentDiv.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Analyzing document...</p>
            </div>
        `;
        
        // Simulate API call
        setTimeout(() => {
            const docType = formData.get('documentType');
            const questions = formData.get('questions');
            
            contentDiv.innerHTML = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i> Document analysis completed successfully!
                </div>
                <h6>Document Summary:</h6>
                <p>This ${docType.toLowerCase()} document appears to be valid and properly executed. 
                ${docType === 'DEED' ? 'The deed transfers ownership from one party to another with all necessary signatures and notarization.' : 
                docType === 'CONTRACT' ? 'The contract outlines the terms and conditions agreed upon by all parties involved.' : 
                'The document has been verified against our records.'}</p>
                
                ${questions ? `
                <h6 class="mt-4">Answers to Your Questions:</h6>
                <p><strong>Q:</strong> ${questions}</p>
                <p><strong>A:</strong> Based on the document analysis, ${questions.toLowerCase().includes('valid') ? 
                    'the document appears to be valid and properly executed.' : 
                    'all required elements are present and the document complies with current regulations.'}</p>
                ` : ''}
                
                <h6 class="mt-4">Key Findings:</h6>
                <ul>
                    <li>Document authenticity verified</li>
                    <li>All required signatures present</li>
                    <li>No evidence of tampering detected</li>
                    <li>Consistent with land registry records</li>
                </ul>
                
                <div class="alert alert-info mt-3">
                    <i class="fas fa-info-circle me-2"></i> This analysis was generated by AI and should be reviewed by a qualified professional.
                </div>
            `;
        }, 3000);
    });
    
    // Load query history
    loadQueryHistory();
});

function setupAIChat() {
    const chatForm = document.getElementById('aiChatForm');
    const chatInput = document.getElementById('aiQueryInput');
    const chatContainer = document.getElementById('chatContainer');
    
    if (!chatForm || !chatInput || !chatContainer) return;
    
    chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const question = chatInput.value.trim();
        if (!question) return;
        
        // Add user message to chat
        addChatMessage('user', question);
        chatInput.value = '';
        
        // Show AI typing indicator
        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'chat-message ai-message typing';
        typingIndicator.innerHTML = `
            <div class="message-header">
                <strong>Land Registry AI</strong>
            </div>
            <div class="message-content">
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
            </div>
        `;
        chatContainer.appendChild(typingIndicator);
        chatContainer.scrollTop = chatContainer.scrollHeight;
        
        // Simulate AI response after delay
        setTimeout(() => {
            document.querySelector('.typing')?.remove();
            addChatMessage('ai', generateAIResponse(question));
            
            // Add to query history
            addToQueryHistory(question);
        }, 1500 + Math.random() * 2000);
    });
}

function addChatMessage(sender, message) {
    const chatContainer = document.getElementById('chatContainer');
    if (!chatContainer) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}-message`;
    messageDiv.innerHTML = `
        <div class="message-header">
            <strong>${sender === 'user' ? 'You' : 'Land Registry AI'}</strong>
            <small class="text-muted">${formatDateTime(new Date().toISOString())}</small>
        </div>
        <div class="message-content">
            ${message}
        </div>
    `;
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function generateAIResponse(question) {
    const responses = {
        'hello': 'Hello! How can I assist you with land registry matters today?',
        'hi': 'Hi there! What would you like to know about land records or property ownership?',
        'transfer': 'For ownership transfers, you need to submit a transfer request with both parties\' signatures and supporting documents. Would you like me to guide you through the process?',
        'dispute': 'Land disputes should be reported through the dispute management system. You\'ll need to provide details about the property and nature of the dispute. Should I help you start this process?',
        'document': 'You can upload documents through the Document Handling section. Supported document types include deeds, surveys, and identity proofs. Need help with a specific document?',
        'status': 'To check the status of a land record, you can search by survey number, location, or owner details in the Public Search portal. I can help you interpret the results if needed.'
    };
    
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('transfer')) {
        return responses['transfer'];
    } else if (lowerQuestion.includes('dispute')) {
        return responses['dispute'];
    } else if (lowerQuestion.includes('document')) {
        return responses['document'];
    } else if (lowerQuestion.includes('status')) {
        return responses['status'];
    } else if (lowerQuestion.includes('hello') || lowerQuestion.includes('hi')) {
        return responses['hello'];
    } else {
        return `I understand you're asking about "${question}". For detailed land registry information, I can help with:
            <ul>
                <li>Ownership transfer procedures</li>
                <li>Document requirements</li>
                <li>Dispute resolution processes</li>
                <li>Property status checks</li>
            </ul>
            Could you please be more specific about what you need?`;
    }
}

function loadQueryHistory(page = 1, pageSize = 10) {
    // Simulate API response
    const queryHistory = Array.from({length: pageSize}, (_, i) => ({
        id: `Q-${new Date().getFullYear()}-${100 + i + (page-1)*pageSize}`,
        date: new Date(Date.now() - Math.floor(Math.random() * 1000*60*60*24*30)).toISOString(),
        query: ['How to transfer land ownership?', 'What documents needed for dispute?', 
                'Check status of survey #L-2023-4567', 'Verify deed authenticity',
                'Steps to register new land'][Math.floor(Math.random() * 5)],
        document: Math.random() > 0.7 ? `DOC-${new Date().getFullYear()}-${Math.floor(Math.random() * 1000)}` : null
    }));
    
    // Update UI
    const tableBody = document.getElementById('queryHistoryTable');
    if (tableBody) {
        tableBody.innerHTML = queryHistory.map(item => `
            <tr>
                <td>${formatDate(item.date)}</td>
                <td>${item.query}</td>
                <td>${item.document || 'None'}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-redo"></i> Repeat
                    </button>
                </td>
            </tr>
        `).join('');
        
        // Update pagination
        const paginationElement = document.querySelector('#queryHistoryPagination');
        if (paginationElement) {
            updatePagination(paginationElement, page, 5, (newPage) => {
                loadQueryHistory(newPage, pageSize);
            });
        }
    }
}

function addToQueryHistory(query) {
    // In a real app, this would send to the backend
    console.log('Adding to query history:', query);
}